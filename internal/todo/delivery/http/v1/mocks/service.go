// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"github.com/Javanshir-SH/query-monitoring/internal/todo/delivery/http/v1"
	"github.com/Javanshir-SH/query-monitoring/internal/todo/entities"
	"sync"
)

// Ensure, that MockService does implement v1.Service.
// If this is not the case, regenerate this file with moq.
var _ v1.Service = &MockService{}

// MockService is a mock implementation of v1.Service.
//
// 	func TestSomethingThatUsesService(t *testing.T) {
//
// 		// make and configure a mocked v1.Service
// 		mockedService := &MockService{
// 			CreateFunc: func(t entities.Task) error {
// 				panic("mock out the Create method")
// 			},
// 			DeleteFunc: func(id int) error {
// 				panic("mock out the Delete method")
// 			},
// 			GetFunc: func(id int) (*entities.Task, error) {
// 				panic("mock out the Get method")
// 			},
// 			UpdateFunc: func(t entities.Task) error {
// 				panic("mock out the Update method")
// 			},
// 		}
//
// 		// use mockedService in code that requires v1.Service
// 		// and then make assertions.
//
// 	}
type MockService struct {
	// CreateFunc mocks the Create method.
	CreateFunc func(t entities.Task) error

	// DeleteFunc mocks the Delete method.
	DeleteFunc func(id int) error

	// GetFunc mocks the Get method.
	GetFunc func(id int) (*entities.Task, error)

	// UpdateFunc mocks the Update method.
	UpdateFunc func(t entities.Task) error

	// calls tracks calls to the methods.
	calls struct {
		// Create holds details about calls to the Create method.
		Create []struct {
			// T is the t argument value.
			T entities.Task
		}
		// Delete holds details about calls to the Delete method.
		Delete []struct {
			// ID is the id argument value.
			ID int
		}
		// Get holds details about calls to the Get method.
		Get []struct {
			// ID is the id argument value.
			ID int
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// T is the t argument value.
			T entities.Task
		}
	}
	lockCreate sync.RWMutex
	lockDelete sync.RWMutex
	lockGet    sync.RWMutex
	lockUpdate sync.RWMutex
}

// Create calls CreateFunc.
func (mock *MockService) Create(t entities.Task) error {
	if mock.CreateFunc == nil {
		panic("MockService.CreateFunc: method is nil but Service.Create was just called")
	}
	callInfo := struct {
		T entities.Task
	}{
		T: t,
	}
	mock.lockCreate.Lock()
	mock.calls.Create = append(mock.calls.Create, callInfo)
	mock.lockCreate.Unlock()
	return mock.CreateFunc(t)
}

// CreateCalls gets all the calls that were made to Create.
// Check the length with:
//     len(mockedService.CreateCalls())
func (mock *MockService) CreateCalls() []struct {
	T entities.Task
} {
	var calls []struct {
		T entities.Task
	}
	mock.lockCreate.RLock()
	calls = mock.calls.Create
	mock.lockCreate.RUnlock()
	return calls
}

// Delete calls DeleteFunc.
func (mock *MockService) Delete(id int) error {
	if mock.DeleteFunc == nil {
		panic("MockService.DeleteFunc: method is nil but Service.Delete was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockDelete.Lock()
	mock.calls.Delete = append(mock.calls.Delete, callInfo)
	mock.lockDelete.Unlock()
	return mock.DeleteFunc(id)
}

// DeleteCalls gets all the calls that were made to Delete.
// Check the length with:
//     len(mockedService.DeleteCalls())
func (mock *MockService) DeleteCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockDelete.RLock()
	calls = mock.calls.Delete
	mock.lockDelete.RUnlock()
	return calls
}

// Get calls GetFunc.
func (mock *MockService) Get(id int) (*entities.Task, error) {
	if mock.GetFunc == nil {
		panic("MockService.GetFunc: method is nil but Service.Get was just called")
	}
	callInfo := struct {
		ID int
	}{
		ID: id,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(id)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedService.GetCalls())
func (mock *MockService) GetCalls() []struct {
	ID int
} {
	var calls []struct {
		ID int
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *MockService) Update(t entities.Task) error {
	if mock.UpdateFunc == nil {
		panic("MockService.UpdateFunc: method is nil but Service.Update was just called")
	}
	callInfo := struct {
		T entities.Task
	}{
		T: t,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(t)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//     len(mockedService.UpdateCalls())
func (mock *MockService) UpdateCalls() []struct {
	T entities.Task
} {
	var calls []struct {
		T entities.Task
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
