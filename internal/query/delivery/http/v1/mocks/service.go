// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/Javanshir-SH/query-monitoring/internal/query/delivery/http/v1"
	"github.com/Javanshir-SH/query-monitoring/internal/query/service"
	"sync"
)

// Ensure, that MockService does implement v1.Service.
// If this is not the case, regenerate this file with moq.
var _ v1.Service = &MockService{}

// MockService is a mock implementation of v1.Service.
//
// 	func TestSomethingThatUsesService(t *testing.T) {
//
// 		// make and configure a mocked v1.Service
// 		mockedService := &MockService{
// 			ListFunc: func(ctx context.Context, dto service.FilterOptionDto) (service.ListOfQueryStatementsDto, int, int, error) {
// 				panic("mock out the List method")
// 			},
// 		}
//
// 		// use mockedService in code that requires v1.Service
// 		// and then make assertions.
//
// 	}
type MockService struct {
	// ListFunc mocks the List method.
	ListFunc func(ctx context.Context, dto service.FilterOptionDto) (service.ListOfQueryStatementsDto, int, int, error)

	// calls tracks calls to the methods.
	calls struct {
		// List holds details about calls to the List method.
		List []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Dto is the dto argument value.
			Dto service.FilterOptionDto
		}
	}
	lockList sync.RWMutex
}

// List calls ListFunc.
func (mock *MockService) List(ctx context.Context, dto service.FilterOptionDto) (service.ListOfQueryStatementsDto, int, int, error) {
	if mock.ListFunc == nil {
		panic("MockService.ListFunc: method is nil but Service.List was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Dto service.FilterOptionDto
	}{
		Ctx: ctx,
		Dto: dto,
	}
	mock.lockList.Lock()
	mock.calls.List = append(mock.calls.List, callInfo)
	mock.lockList.Unlock()
	return mock.ListFunc(ctx, dto)
}

// ListCalls gets all the calls that were made to List.
// Check the length with:
//     len(mockedService.ListCalls())
func (mock *MockService) ListCalls() []struct {
	Ctx context.Context
	Dto service.FilterOptionDto
} {
	var calls []struct {
		Ctx context.Context
		Dto service.FilterOptionDto
	}
	mock.lockList.RLock()
	calls = mock.calls.List
	mock.lockList.RUnlock()
	return calls
}
