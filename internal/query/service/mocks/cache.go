// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mock

import (
	"context"
	"github.com/Javanshir-SH/query-monitoring/internal/query/service"
	"github.com/Javanshir-SH/query-monitoring/internal/query/storage"
	"sync"
)

// Ensure, that MockCacheRepo does implement service.CacheRepo.
// If this is not the case, regenerate this file with moq.
var _ service.CacheRepo = &MockCacheRepo{}

// MockCacheRepo is a mock implementation of service.CacheRepo.
//
// 	func TestSomethingThatUsesCacheRepo(t *testing.T) {
//
// 		// make and configure a mocked service.CacheRepo
// 		mockedCacheRepo := &MockCacheRepo{
// 			GetFunc: func(ctx context.Context, key string) (storage.ListOfQuery, error) {
// 				panic("mock out the Get method")
// 			},
// 			SetFunc: func(ctx context.Context, key string, sts storage.ListOfQuery) error {
// 				panic("mock out the Set method")
// 			},
// 		}
//
// 		// use mockedCacheRepo in code that requires service.CacheRepo
// 		// and then make assertions.
//
// 	}
type MockCacheRepo struct {
	// GetFunc mocks the Get method.
	GetFunc func(ctx context.Context, key string) (storage.ListOfQuery, error)

	// SetFunc mocks the Set method.
	SetFunc func(ctx context.Context, key string, sts storage.ListOfQuery) error

	// calls tracks calls to the methods.
	calls struct {
		// Get holds details about calls to the Get method.
		Get []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
		}
		// Set holds details about calls to the Set method.
		Set []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Key is the key argument value.
			Key string
			// Sts is the sts argument value.
			Sts storage.ListOfQuery
		}
	}
	lockGet sync.RWMutex
	lockSet sync.RWMutex
}

// Get calls GetFunc.
func (mock *MockCacheRepo) Get(ctx context.Context, key string) (storage.ListOfQuery, error) {
	if mock.GetFunc == nil {
		panic("MockCacheRepo.GetFunc: method is nil but CacheRepo.Get was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
	}{
		Ctx: ctx,
		Key: key,
	}
	mock.lockGet.Lock()
	mock.calls.Get = append(mock.calls.Get, callInfo)
	mock.lockGet.Unlock()
	return mock.GetFunc(ctx, key)
}

// GetCalls gets all the calls that were made to Get.
// Check the length with:
//     len(mockedCacheRepo.GetCalls())
func (mock *MockCacheRepo) GetCalls() []struct {
	Ctx context.Context
	Key string
} {
	var calls []struct {
		Ctx context.Context
		Key string
	}
	mock.lockGet.RLock()
	calls = mock.calls.Get
	mock.lockGet.RUnlock()
	return calls
}

// Set calls SetFunc.
func (mock *MockCacheRepo) Set(ctx context.Context, key string, sts storage.ListOfQuery) error {
	if mock.SetFunc == nil {
		panic("MockCacheRepo.SetFunc: method is nil but CacheRepo.Set was just called")
	}
	callInfo := struct {
		Ctx context.Context
		Key string
		Sts storage.ListOfQuery
	}{
		Ctx: ctx,
		Key: key,
		Sts: sts,
	}
	mock.lockSet.Lock()
	mock.calls.Set = append(mock.calls.Set, callInfo)
	mock.lockSet.Unlock()
	return mock.SetFunc(ctx, key, sts)
}

// SetCalls gets all the calls that were made to Set.
// Check the length with:
//     len(mockedCacheRepo.SetCalls())
func (mock *MockCacheRepo) SetCalls() []struct {
	Ctx context.Context
	Key string
	Sts storage.ListOfQuery
} {
	var calls []struct {
		Ctx context.Context
		Key string
		Sts storage.ListOfQuery
	}
	mock.lockSet.RLock()
	calls = mock.calls.Set
	mock.lockSet.RUnlock()
	return calls
}
